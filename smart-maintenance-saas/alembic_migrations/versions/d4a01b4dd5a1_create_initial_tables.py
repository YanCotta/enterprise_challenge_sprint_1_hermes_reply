"""create_initial_tables

Revision ID: d4a01b4dd5a1
Revises: 
Create Date: 2025-05-30 11:40:56.107872

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import String, Text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd4a01b4dd5a1'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('anomaly_alerts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sensor_id', sa.String(length=255), nullable=False),
    sa.Column('anomaly_type', sa.String(length=100), nullable=False),
    sa.Column('severity', sa.Integer(), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('evidence', postgresql.JSONB(astext_type=Text()), nullable=True),
    sa.Column('recommended_actions', postgresql.ARRAY(String()), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_anomaly_alerts_id'), 'anomaly_alerts', ['id'], unique=False)
    op.create_index(op.f('ix_anomaly_alerts_sensor_id'), 'anomaly_alerts', ['sensor_id'], unique=False)
    op.create_table('maintenance_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('equipment_id', sa.String(length=255), nullable=False),
    sa.Column('task_type', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('estimated_duration_hours', sa.Float(), nullable=True),
    sa.Column('actual_duration_hours', sa.Float(), nullable=True),
    sa.Column('required_skills', postgresql.ARRAY(String()), nullable=True),
    sa.Column('parts_needed', postgresql.ARRAY(String()), nullable=True),
    sa.Column('assigned_technician_id', sa.String(length=255), nullable=True),
    sa.Column('scheduled_start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('scheduled_end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_maintenance_tasks_equipment_id'), 'maintenance_tasks', ['equipment_id'], unique=False)
    op.create_index(op.f('ix_maintenance_tasks_id'), 'maintenance_tasks', ['id'], unique=False)
    op.create_table('sensor_readings',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sensor_id', sa.String(length=255), nullable=False),
    sa.Column('sensor_type', sa.String(length=50), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('quality', sa.Float(), nullable=True),
    sa.Column('sensor_metadata', postgresql.JSONB(astext_type=Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id', 'timestamp')
    )
    op.create_index(op.f('ix_sensor_readings_id'), 'sensor_readings', ['id'], unique=False)
    op.create_index(op.f('ix_sensor_readings_sensor_id'), 'sensor_readings', ['sensor_id'], unique=False)
    op.create_index(op.f('ix_sensor_readings_timestamp'), 'sensor_readings', ['timestamp'], unique=False)
    
    # Create TimescaleDB hypertable for the sensor_readings table
    op.execute("SELECT create_hypertable('sensor_readings', 'timestamp', if_not_exists => TRUE);")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_sensor_readings_timestamp'), table_name='sensor_readings')
    op.drop_index(op.f('ix_sensor_readings_sensor_id'), table_name='sensor_readings')
    op.drop_index(op.f('ix_sensor_readings_id'), table_name='sensor_readings')
    op.drop_table('sensor_readings')
    op.drop_index(op.f('ix_maintenance_tasks_id'), table_name='maintenance_tasks')
    op.drop_index(op.f('ix_maintenance_tasks_equipment_id'), table_name='maintenance_tasks')
    op.drop_table('maintenance_tasks')
    op.drop_index(op.f('ix_anomaly_alerts_sensor_id'), table_name='anomaly_alerts')
    op.drop_index(op.f('ix_anomaly_alerts_id'), table_name='anomaly_alerts')
    op.drop_table('anomaly_alerts')
    # ### end Alembic commands ###
