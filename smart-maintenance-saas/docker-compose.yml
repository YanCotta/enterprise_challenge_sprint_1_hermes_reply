services:
  # FastAPI Backend Service
  api:
    build: .
    image: smart-maintenance-saas:latest
    container_name: smart_maintenance_api
    ports:
      - "8000:8000"  # FastAPI backend
    environment:
      - DATABASE_URL=postgresql://smart_user:strong_password@db:5432/smart_maintenance_db
      - PYTHONPATH=/app
      - DISABLE_CHROMADB=true  # Disable ChromaDB for now due to SQLite version
      - MLFLOW_S3_ENDPOINT_URL=http://mlflow:5000  # Force MLflow client to proxy artifact access via HTTP
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    user: "1000:1000"  # Match host user for consistent file ownership across containers
    volumes:
      - ./logs:/app/logs  # Mount logs directory
      - ./mlflow_data:/mlruns        # MLflow artifact store for model loading (matches MLflow container)
    command: ["sh", "-c", "uvicorn apps.api.main:app --host 0.0.0.0 --port 8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smart-maintenance-network

  # Streamlit UI Service
  ui:
    build: .
    image: smart-maintenance-saas:latest
    container_name: smart_maintenance_ui
    ports:
      - "8501:8501"  # Streamlit UI
    environment:
      - DATABASE_URL=postgresql://smart_user:strong_password@db:5432/smart_maintenance_db
      - PYTHONPATH=/app
      - API_BASE_URL=http://api:8000  # Internal communication with API
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs  # Mount logs directory
    command: ["streamlit", "run", "ui/streamlit_app.py", "--server.port", "8501", "--server.address", "0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - smart-maintenance-network

  # Database Service
  db:
    image: timescale/timescaledb:latest-pg15
    container_name: smart_maintenance_db
    environment:
      POSTGRES_USER: smart_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: smart_maintenance_db
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smart_user -d smart_maintenance_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - smart-maintenance-network

  # MLflow Service (hardened)
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: smart_maintenance_mlflow
    restart: unless-stopped
    ports:
      - "5000:5000"
    # Ensure backend store (SQLite) and artifact root map to host for persistence
    volumes:
      - ./mlflow_data:/mlruns        # Artifact store
      - ./mlflow_db:/mlflow_db       # SQLite backend store (mlflow.db lives here)
    networks:
      - smart-maintenance-network

  # One-off notebook runner service for ML training / experimentation
  notebook_runner:
    build:
      context: .
      dockerfile: Dockerfile.ml
    container_name: smart_maintenance_notebook_runner
    command: >
      sh -c "papermill notebooks/$${NOTEBOOK_FILE}.ipynb notebooks/$${NOTEBOOK_FILE}_output.ipynb"
    environment:
      - DOCKER_ENV=true
      - NOTEBOOK_FILE=02_anomaly_isolation_forest
    user: "1000:1000"  # Match host user for consistent file ownership with API container
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./apps:/app/apps
      - ./docs:/app/docs
      - ./mlflow_data:/mlruns        # MLflow artifact store (matches other containers)
    networks:
      - smart-maintenance-network
    depends_on:
      - mlflow

  # Generic ML utility container (used for ad-hoc commands like Locust load testing)
  ml:
    build:
      context: .
      dockerfile: Dockerfile.ml
    container_name: smart_maintenance_ml
    command: bash
    environment:
      - DOCKER_ENV=true
    volumes:
      - .:/app  # Mount entire project directory
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./apps:/app/apps
      - ./docs:/app/docs
      - ./mlflow_data:/app/mlflow_data
    networks:
      - smart-maintenance-network
    depends_on:
      - mlflow

volumes:
  pg_data:
    name: smart_maintenance_pg_data

networks:
  smart-maintenance-network:
    driver: bridge
